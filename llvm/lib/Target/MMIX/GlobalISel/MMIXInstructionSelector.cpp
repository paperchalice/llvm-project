//===-- MMIXInstructionSelector.cpp -----------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// MMIX.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "MMIXTargetMachine.h"
#include "MMIXSubtarget.h"
#include "MMIXInstructionSelector.h"
#include "MMIXRegisterBankInfo.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"

#define DEBUG_TYPE "MMIX-isel"

namespace llvm {

#define GET_GLOBALISEL_IMPL
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

const char *MMIXInstructionSelector::getName() { return DEBUG_TYPE; }

MMIXInstructionSelector::MMIXInstructionSelector(
    const MMIXTargetMachine &TM, const MMIXSubtarget &STI,
    const MMIXRegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),



#define GET_GLOBALISEL_PREDICATES_INIT
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT

#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool MMIXInstructionSelector::select(MachineInstr &I) {
  return true;
}

} // namespace llvm