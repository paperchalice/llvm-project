//===-- MMIXInstructionSelector.cpp -----------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// MMIX.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "MMIXInstructionSelector.h"
#include "MMIXRegisterBankInfo.h"
#include "MMIXSubtarget.h"
#include "MMIXTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"

#define DEBUG_TYPE "mmix-isel"

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET
namespace llvm {
class MMIXInstructionSelector : public InstructionSelector {
public:
  MMIXInstructionSelector(const MMIXTargetMachine &TM, const MMIXSubtarget &STI,
                          const MMIXRegisterBankInfo &RBI);
  static const char *getName();
  bool select(MachineInstr &I) override;

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const MMIXSubtarget &STI;
  const MMIXInstrInfo &TII;
  const MMIXRegisterInfo &TRI;
  const MMIXRegisterBankInfo &RBI;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // namespace llvm

using namespace llvm;

#define GET_GLOBALISEL_IMPL
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

const char *MMIXInstructionSelector::getName() { return DEBUG_TYPE; }

MMIXInstructionSelector::MMIXInstructionSelector(
    const MMIXTargetMachine &TM, const MMIXSubtarget &STI,
    const MMIXRegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT

#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "MMIXGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool MMIXInstructionSelector::select(MachineInstr &I) {
  // Ignore COPY's: the register allocator will handle them.
  if (I.getOpcode() == TargetOpcode::COPY) {
    return true;
  }
  if (selectImpl(I, *CoverageInfo)) {
    return true;
  }
  return true;
}

InstructionSelector *::llvm::createMMIXInstructionSelector(const MMIXTargetMachine &TM,
                                                   MMIXSubtarget &STI,
                                                   MMIXRegisterBankInfo &RBI) {
  return new MMIXInstructionSelector(TM, STI, RBI);
}
